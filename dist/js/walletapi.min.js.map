{"version":3,"sources":["walletapi.js"],"names":["WalletApi","invoke","client","username","password","command","payload","handler","observers","walletId","sendDestination","correlationId","generateUUID","push","MessageListener","console","log","send","content-type","__TypeId__","JSON","stringify","key","d","Date","getTime","uuid","replace","c","r","Math","random","floor","toString","serviceUrl","autoConnect","connectCommand","connectPayload","connectHandler","subscribeDestination","readyHandler","ws","SockJS","Stomp","over","heartbeat","incoming","outgoing","this","serviceUser","servicePassword","on_connect","call","subscribe","on_error","onreceive","m","parse","body","index","i","length","type","splice","connect","prototype","addListener","removeListener","responseHandler"],"mappings":"AAEA,GAAIA,YAEJ,WA6HI,QAASC,GAAOC,EAAQC,EAAUC,EAAUC,EAASC,EAASC,EAASC,EAAWC,EAAUC,EAAiBC,GACpGA,IACDA,EAAgBC,KAEhBL,GACAC,EAAUK,KAAK,GAAIC,iBAAgBH,EAAeN,EAASE,EAAS,QAExEQ,QAAQC,IAAI,YAAcX,EAAU,cAAgBI,EAAW,wBAA0BE,EAAgB,OACzGT,EAAOe,KAAKP,GACPQ,eAAe,mBAAmBC,WAAa,2DAChDC,KAAKC,WAAWV,cAAgBA,EAC5BR,SAAYA,EACZC,SAAYA,EACZkB,IAAOb,EACPJ,QAAWA,EACXC,QAAWA,KAKvB,QAASM,KACL,GAAIW,IAAI,GAAIC,OAAOC,UACfC,EAAO,uCAAuCC,QAAQ,QAAS,SAASC,GACxE,GAAIC,IAAKN,EAAkB,GAAdO,KAAKC,UAAa,GAAK,CAEpC,OADAR,GAAIO,KAAKE,MAAMT,EAAE,KACN,KAAHK,EAASC,EAAO,EAAFA,EAAM,GAAMI,SAAS,KAE/C,OAAOP,GArIX1B,UAAY,SAASkC,EACA/B,EACAC,EACAK,EACA0B,EACAC,EACAC,EACAC,EACAC,EACA7B,EACA8B,GACjB,GAAIC,GAAwB,GAAIC,QAAOR,GACnChC,EAAwByC,MAAMC,KAAKH,EACvCvC,GAAO2C,UAAUC,SAAW,EAC5B5C,EAAO2C,UAAUE,SAAW,CAC5B,IAAIvC,KA6CJ,OA5CAwC,MAAK9C,OAAuBA,EAC5B8C,KAAKC,YAAuB,UAC5BD,KAAKE,gBAAuB,UAC5BF,KAAK7C,SAAuBA,EAC5B6C,KAAK5C,SAAuBA,EAC5B4C,KAAKvC,SAAuBA,EAC5BuC,KAAKtC,gBAAuBA,EAC5BsC,KAAKxC,UAAuBA,EAC5BwC,KAAKG,WAAa,WACVX,GACAA,EAAaY,KAAKJ,MAEtB9C,EAAOmD,UAAUd,EAAuB9B,GACpC2B,GACAnC,EAAOC,EAAQC,EAAUC,EAAUgC,EAAgBC,EAAgBC,EAAgB9B,EAAWC,EAAUC,IAGhHsC,KAAKM,SAAY,WACbvC,QAAQC,IAAI,UAEhBd,EAAOqD,UAAY,SAASC,GACxB,GAAIlD,GAAUc,KAAKqC,MAAMD,EAAEE,MACvBC,EAAU,EACd,IAAInD,EAAW,CACX,IAAK,GAAIoD,GAAI,EAAGA,EAAIpD,EAAUqD,OAAQD,IACT,gBAArBpD,EAAUoD,GAAGE,KACTtD,EAAUoD,GAAGvD,SAAWC,EAAQD,SAChCG,EAAUoD,GAAGrD,QAAQ6C,KAAKJ,KAAM1C,GAET,OAArBE,EAAUoD,GAAGE,MACftD,EAAUoD,GAAGjD,eAAiBL,EAAQK,gBACtCgD,EAAQC,EACRpD,EAAUoD,GAAGrD,QAAQ6C,KAAKJ,KAAM1C,GAIxCqD,GAAQ,IACRnD,EAAUuD,OAAOJ,EAAO,KAIhCxB,GACAa,KAAKgB,WAGLA,QAAoBhE,UAAUiE,UAAUD,QACxC/D,OAAoBD,UAAUiE,UAAUhE,OACxCiE,YAAoBlE,UAAUiE,UAAUC,YACxCC,eAAoBnE,UAAUiE,UAAUE,eACxC3D,UAAoBwC,KAAKxC,UACzBN,OAAoB8C,KAAK9C,OACzB+C,YAAoBD,KAAKC,YACzBC,gBAAoBF,KAAKE,gBACzBC,WAAoBH,KAAKG,WACzBG,SAAoBN,KAAKM,SACzBnD,SAAoB6C,KAAK7C,SACzBC,SAAoB4C,KAAK5C,SACzBK,SAAoBuC,KAAKvC,SACzBC,gBAAoBsC,KAAKtC,kBAIjCV,UAAUiE,UAAUD,QAAU,WAE1B,MADAhB,MAAK9C,OAAO8D,QAAQhB,KAAKC,YAAaD,KAAKE,gBAAiBF,KAAKG,WAAYH,KAAKM,SAAU,KACrFN,MAGXhD,UAAUiE,UAAUhE,OAAS,SAASI,EAASC,EAAS8D,EAAiBzD,GAErE,MADAV,GAAO+C,KAAK9C,OAAQ8C,KAAK7C,SAAU6C,KAAK5C,SAAUC,EAASC,EAAS8D,EAAiBpB,KAAKxC,UAAWwC,KAAKvC,SAAUuC,KAAKtC,gBAAiBC,GACnIqC,MAGXhD,UAAUiE,UAAUC,YAAc,SAAS7D,EAASE,GAEhD,MADAyC,MAAKxC,UAAUK,KAAK,GAAIC,iBAAgB,KAAMT,EAASE,EAAS,iBACzDyC,MAGXhD,UAAUiE,UAAUE,eAAiB,SAAS9D,EAASE,GAEnD,IAAK,GADDoD,GAAQ,GACHC,EAAI,EAAGA,EAAIZ,KAAKxC,UAAUqD,OAAQD,IACnCZ,KAAKxC,UAAUoD,GAAGvD,SAAWA,GAAW2C,KAAKxC,UAAUoD,GAAGrD,SAAWA,GAAqC,gBAA1ByC,KAAKxC,UAAUoD,GAAGE,OAClGH,EAAQC,EAMhB,OAHID,GAAQ,IACRX,KAAKxC,UAAUuD,OAAOJ,EAAO,GAE1BX,QAmCf,IAAIlC,iBAAkB,SAASH,EAAeN,EAASE,EAASuD,GAC5Dd,KAAKrC,cAAgBA,EACrBqC,KAAK3C,QAAUA,EACf2C,KAAKzC,QAAUA,EACfyC,KAAKc,KAAOA","file":"walletapi.min.js","sourcesContent":["/* jshint undef: true */\r\n\r\nvar WalletApi;\r\n\r\n(function() {\r\n\r\n    /**\r\n     * WalletApi - an interface to wallet notifications\r\n     *\r\n     * @param serviceUrl - Wallet API WebSocket endpoint\r\n     * @param username - User name logged in\r\n     * @param password - User password\r\n     * @param walletId - Wallet Id you are interacting with\r\n     * @param autoConnect - Tells whether connect automatically\r\n     * @param connectCommand - Command to execute immediately after connection is established\r\n     * @param connectPayload - Payload that has to be carried with connect command\r\n     * @param connectHandler - Handler that has to be notified when connection command's response is back\r\n     * @param subscribeDestination - Desitnation for wallet server to client messaging ( '/exchange/e-wallet-updates/' )\r\n     * @param sendDestination - Destination for client to server messaging ( '/queue/wallet' )\r\n     * @param readyHandler - A function to call when socket is connected and this class is ready to accept invoke calls\r\n     * @returns {WalletApi}\r\n     * @constructor\r\n     */\r\n    WalletApi = function(serviceUrl,\r\n                         username,\r\n                         password,\r\n                         walletId,\r\n                         autoConnect,\r\n                         connectCommand,\r\n                         connectPayload,\r\n                         connectHandler,\r\n                         subscribeDestination,\r\n                         sendDestination,\r\n                         readyHandler) {\r\n        var ws                    = new SockJS(serviceUrl);\r\n        var client                = Stomp.over(ws);\r\n        client.heartbeat.incoming = 0;\r\n        client.heartbeat.outgoing = 0;\r\n        var observers             = [];\r\n        this.client               = client;\r\n        this.serviceUser          = 'bushido';\r\n        this.servicePassword      = 'bushido';\r\n        this.username             = username;\r\n        this.password             = password;\r\n        this.walletId             = walletId;\r\n        this.sendDestination      = sendDestination;\r\n        this.observers            = observers;\r\n        this.on_connect = function() {\r\n            if (readyHandler) {\r\n                readyHandler.call(this);\r\n            }\r\n            client.subscribe(subscribeDestination + walletId);\r\n            if (connectCommand) {\r\n                invoke(client, username, password, connectCommand, connectPayload, connectHandler, observers, walletId, sendDestination);\r\n            }\r\n        };\r\n        this.on_error =  function() {\r\n            console.log('error');\r\n        };\r\n        client.onreceive = function(m) {\r\n            var payload = JSON.parse(m.body);\r\n            var index   = -1;\r\n            if (observers) {\r\n                for (var i = 0; i < observers.length; i++) {\r\n                    if (observers[i].type == 'notification') {\r\n                        if (observers[i].command == payload.command) {\r\n                            observers[i].handler.call(this, payload);\r\n                        }\r\n                    } else if(observers[i].type == 'rpc') {\r\n                        if (observers[i].correlationId == payload.correlationId) {\r\n                            index = i;\r\n                            observers[i].handler.call(this, payload);\r\n                        }\r\n                    }\r\n                }\r\n                if (index > -1) {\r\n                    observers.splice(index, 1);\r\n                }\r\n            }\r\n        };\r\n        if (autoConnect) {\r\n            this.connect();\r\n        }\r\n        return {\r\n            'connect'         : WalletApi.prototype.connect,\r\n            'invoke'          : WalletApi.prototype.invoke,\r\n            'addListener'     : WalletApi.prototype.addListener,\r\n            'removeListener'  : WalletApi.prototype.removeListener,\r\n            'observers'       : this.observers,\r\n            'client'          : this.client,\r\n            'serviceUser'     : this.serviceUser,\r\n            'servicePassword' : this.servicePassword,\r\n            'on_connect'      : this.on_connect,\r\n            'on_error'        : this.on_error,\r\n            'username'        : this.username,\r\n            'password'        : this.password,\r\n            'walletId'        : this.walletId,\r\n            'sendDestination' : this.sendDestination\r\n        };\r\n    };\r\n\r\n    WalletApi.prototype.connect = function() {\r\n        this.client.connect(this.serviceUser, this.servicePassword, this.on_connect, this.on_error, '/');\r\n        return this;\r\n    };\r\n\r\n    WalletApi.prototype.invoke = function(command, payload, responseHandler, correlationId) {\r\n        invoke(this.client, this.username, this.password, command, payload, responseHandler, this.observers, this.walletId, this.sendDestination, correlationId);\r\n        return this;\r\n    };\r\n\r\n    WalletApi.prototype.addListener = function(command, handler) {\r\n        this.observers.push(new MessageListener(null, command, handler, 'notification'));\r\n        return this;\r\n    };\r\n\r\n    WalletApi.prototype.removeListener = function(command, handler) {\r\n        var index = -1;\r\n        for (var i = 0; i < this.observers.length; i++) {\r\n            if (this.observers[i].command == command && this.observers[i].handler == handler && this.observers[i].type == 'notification') {\r\n                index = i;\r\n            }\r\n        }\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    function invoke(client, username, password, command, payload, handler, observers, walletId, sendDestination, correlationId) {\r\n        if (!correlationId) {\r\n            correlationId = generateUUID();\r\n        }\r\n        if (handler) {\r\n            observers.push(new MessageListener(correlationId, command, handler, 'rpc'));\r\n        }\r\n        console.log('Invoking ' + command + ' on wallet ' + walletId + ' with correlationId: ' + correlationId + '...');\r\n        client.send(sendDestination,\r\n            {'content-type':'application/json','__TypeId__':'com.bitcoin.blockchain.api.domain.message.ClientMessage'},\r\n            JSON.stringify({'correlationId':correlationId,\r\n                'username': username,\r\n                'password': password,\r\n                'key': walletId,\r\n                'command': command,\r\n                'payload': payload}\r\n            )\r\n        );\r\n    }\r\n\r\n    function generateUUID(){\r\n        var d = new Date().getTime();\r\n        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n            var r = (d + Math.random()*16)%16 | 0;\r\n            d = Math.floor(d/16);\r\n            return (c=='x' ? r : (r&0x3|0x8)).toString(16);\r\n        });\r\n        return uuid;\r\n    }\r\n\r\n})();\r\n\r\nvar MessageListener = function(correlationId, command, handler, type) {\r\n    this.correlationId = correlationId;\r\n    this.command = command;\r\n    this.handler = handler;\r\n    this.type = type;\r\n};"],"sourceRoot":"/source/"}