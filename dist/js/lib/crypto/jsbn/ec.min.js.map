{"version":3,"sources":["lib/crypto/jsbn/ec.js"],"names":["ECFieldElementFp","q","x","this","feFpEquals","other","equals","feFpToBigInteger","feFpNegate","negate","mod","feFpAdd","b","add","toBigInteger","feFpSubtract","subtract","feFpMultiply","multiply","feFpSquare","square","feFpDivide","modInverse","ECPointFp","curve","y","z","BigInteger","ONE","zinv","pointFpGetX","fromBigInteger","pointFpGetY","pointFpEquals","isInfinity","u","v","ZERO","pointFpIsInfinity","pointFpNegate","pointFpAdd","twice","getInfinity","THREE","x1","y1","v2","v3","x1v2","zu2","x3","shiftLeft","y3","z3","pointFpTwice","signum","y1z1","y1sqz1","a","w","pointFpMultiply","k","i","e","h","neg","R","bitLength","hBit","testBit","eBit","pointFpMultiplyTwo","j","both","ECCurveFp","infinity","curveFpGetQ","curveFpGetA","curveFpGetB","curveFpEquals","curveFpGetInfinity","curveFpFromBigInteger","curveFpDecodePointHex","s","parseInt","substr","len","length","xHex","yHex","prototype","divide","getX","getY","multiplyTwo","getQ","getA","getB","decodePointHex"],"mappings":"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","file":"lib/crypto/jsbn/ec.min.js","sourcesContent":["// Basic Javascript Elliptic Curve implementation\r\n// Ported loosely from BouncyCastle's Java EC code\r\n// Only Fp curves implemented for now\r\n\r\n// Requires jsbn.js and jsbn2.js\r\n\r\n// ----------------\r\n// ECFieldElementFp\r\n\r\n// constructor\r\nfunction ECFieldElementFp(q,x) {\r\n    this.x = x;\r\n    // TODO if(x.compareTo(q) >= 0) error\r\n    this.q = q;\r\n}\r\n\r\nfunction feFpEquals(other) {\r\n    if(other == this) return true;\r\n    return (this.q.equals(other.q) && this.x.equals(other.x));\r\n}\r\n\r\nfunction feFpToBigInteger() {\r\n    return this.x;\r\n}\r\n\r\nfunction feFpNegate() {\r\n    return new ECFieldElementFp(this.q, this.x.negate().mod(this.q));\r\n}\r\n\r\nfunction feFpAdd(b) {\r\n    return new ECFieldElementFp(this.q, this.x.add(b.toBigInteger()).mod(this.q));\r\n}\r\n\r\nfunction feFpSubtract(b) {\r\n    return new ECFieldElementFp(this.q, this.x.subtract(b.toBigInteger()).mod(this.q));\r\n}\r\n\r\nfunction feFpMultiply(b) {\r\n    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger()).mod(this.q));\r\n}\r\n\r\nfunction feFpSquare() {\r\n    return new ECFieldElementFp(this.q, this.x.square().mod(this.q));\r\n}\r\n\r\nfunction feFpDivide(b) {\r\n    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger().modInverse(this.q)).mod(this.q));\r\n}\r\n\r\nECFieldElementFp.prototype.equals = feFpEquals;\r\nECFieldElementFp.prototype.toBigInteger = feFpToBigInteger;\r\nECFieldElementFp.prototype.negate = feFpNegate;\r\nECFieldElementFp.prototype.add = feFpAdd;\r\nECFieldElementFp.prototype.subtract = feFpSubtract;\r\nECFieldElementFp.prototype.multiply = feFpMultiply;\r\nECFieldElementFp.prototype.square = feFpSquare;\r\nECFieldElementFp.prototype.divide = feFpDivide;\r\n\r\n// ----------------\r\n// ECPointFp\r\n\r\n// constructor\r\nfunction ECPointFp(curve,x,y,z) {\r\n    this.curve = curve;\r\n    this.x = x;\r\n    this.y = y;\r\n    // Projective coordinates: either zinv == null or z * zinv == 1\r\n    // z and zinv are just BigIntegers, not fieldElements\r\n    if(z == null) {\r\n      this.z = BigInteger.ONE;\r\n    }\r\n    else {\r\n      this.z = z;\r\n    }\r\n    this.zinv = null;\r\n    //TODO: compression flag\r\n}\r\n\r\nfunction pointFpGetX() {\r\n    if(this.zinv == null) {\r\n      this.zinv = this.z.modInverse(this.curve.q);\r\n    }\r\n    return this.curve.fromBigInteger(this.x.toBigInteger().multiply(this.zinv).mod(this.curve.q));\r\n}\r\n\r\nfunction pointFpGetY() {\r\n    if(this.zinv == null) {\r\n      this.zinv = this.z.modInverse(this.curve.q);\r\n    }\r\n    return this.curve.fromBigInteger(this.y.toBigInteger().multiply(this.zinv).mod(this.curve.q));\r\n}\r\n\r\nfunction pointFpEquals(other) {\r\n    if(other == this) return true;\r\n    if(this.isInfinity()) return other.isInfinity();\r\n    if(other.isInfinity()) return this.isInfinity();\r\n    var u, v;\r\n    // u = Y2 * Z1 - Y1 * Z2\r\n    u = other.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(other.z)).mod(this.curve.q);\r\n    if(!u.equals(BigInteger.ZERO)) return false;\r\n    // v = X2 * Z1 - X1 * Z2\r\n    v = other.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(other.z)).mod(this.curve.q);\r\n    return v.equals(BigInteger.ZERO);\r\n}\r\n\r\nfunction pointFpIsInfinity() {\r\n    if((this.x == null) && (this.y == null)) return true;\r\n    return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO);\r\n}\r\n\r\nfunction pointFpNegate() {\r\n    return new ECPointFp(this.curve, this.x, this.y.negate(), this.z);\r\n}\r\n\r\nfunction pointFpAdd(b) {\r\n    if(this.isInfinity()) return b;\r\n    if(b.isInfinity()) return this;\r\n\r\n    // u = Y2 * Z1 - Y1 * Z2\r\n    var u = b.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(b.z)).mod(this.curve.q);\r\n    // v = X2 * Z1 - X1 * Z2\r\n    var v = b.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(b.z)).mod(this.curve.q);\r\n\r\n    if(BigInteger.ZERO.equals(v)) {\r\n        if(BigInteger.ZERO.equals(u)) {\r\n            return this.twice(); // this == b, so double\r\n        }\r\n\treturn this.curve.getInfinity(); // this = -b, so infinity\r\n    }\r\n\r\n    var THREE = new BigInteger(\"3\");\r\n    var x1 = this.x.toBigInteger();\r\n    var y1 = this.y.toBigInteger();\r\n    var x2 = b.x.toBigInteger();\r\n    var y2 = b.y.toBigInteger();\r\n\r\n    var v2 = v.square();\r\n    var v3 = v2.multiply(v);\r\n    var x1v2 = x1.multiply(v2);\r\n    var zu2 = u.square().multiply(this.z);\r\n\r\n    // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)\r\n    var x3 = zu2.subtract(x1v2.shiftLeft(1)).multiply(b.z).subtract(v3).multiply(v).mod(this.curve.q);\r\n    // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3\r\n    var y3 = x1v2.multiply(THREE).multiply(u).subtract(y1.multiply(v3)).subtract(zu2.multiply(u)).multiply(b.z).add(u.multiply(v3)).mod(this.curve.q);\r\n    // z3 = v^3 * z1 * z2\r\n    var z3 = v3.multiply(this.z).multiply(b.z).mod(this.curve.q);\r\n\r\n    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);\r\n}\r\n\r\nfunction pointFpTwice() {\r\n    if(this.isInfinity()) return this;\r\n    if(this.y.toBigInteger().signum() == 0) return this.curve.getInfinity();\r\n\r\n    // TODO: optimized handling of constants\r\n    var THREE = new BigInteger(\"3\");\r\n    var x1 = this.x.toBigInteger();\r\n    var y1 = this.y.toBigInteger();\r\n\r\n    var y1z1 = y1.multiply(this.z);\r\n    var y1sqz1 = y1z1.multiply(y1).mod(this.curve.q);\r\n    var a = this.curve.a.toBigInteger();\r\n\r\n    // w = 3 * x1^2 + a * z1^2\r\n    var w = x1.square().multiply(THREE);\r\n    if(!BigInteger.ZERO.equals(a)) {\r\n      w = w.add(this.z.square().multiply(a));\r\n    }\r\n    w = w.mod(this.curve.q);\r\n    // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)\r\n    var x3 = w.square().subtract(x1.shiftLeft(3).multiply(y1sqz1)).shiftLeft(1).multiply(y1z1).mod(this.curve.q);\r\n    // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3\r\n    var y3 = w.multiply(THREE).multiply(x1).subtract(y1sqz1.shiftLeft(1)).shiftLeft(2).multiply(y1sqz1).subtract(w.square().multiply(w)).mod(this.curve.q);\r\n    // z3 = 8 * (y1 * z1)^3\r\n    var z3 = y1z1.square().multiply(y1z1).shiftLeft(3).mod(this.curve.q);\r\n\r\n    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);\r\n}\r\n\r\n// Simple NAF (Non-Adjacent Form) multiplication algorithm\r\n// TODO: modularize the multiplication algorithm\r\nfunction pointFpMultiply(k) {\r\n    if(this.isInfinity()) return this;\r\n    if(k.signum() == 0) return this.curve.getInfinity();\r\n\r\n    var e = k;\r\n    var h = e.multiply(new BigInteger(\"3\"));\r\n\r\n    var neg = this.negate();\r\n    var R = this;\r\n\r\n    var i;\r\n    for(i = h.bitLength() - 2; i > 0; --i) {\r\n\tR = R.twice();\r\n\r\n\tvar hBit = h.testBit(i);\r\n\tvar eBit = e.testBit(i);\r\n\r\n\tif (hBit != eBit) {\r\n\t    R = R.add(hBit ? this : neg);\r\n\t}\r\n    }\r\n\r\n    return R;\r\n}\r\n\r\n// Compute this*j + x*k (simultaneous multiplication)\r\nfunction pointFpMultiplyTwo(j,x,k) {\r\n  var i;\r\n  if(j.bitLength() > k.bitLength())\r\n    i = j.bitLength() - 1;\r\n  else\r\n    i = k.bitLength() - 1;\r\n\r\n  var R = this.curve.getInfinity();\r\n  var both = this.add(x);\r\n  while(i >= 0) {\r\n    R = R.twice();\r\n    if(j.testBit(i)) {\r\n      if(k.testBit(i)) {\r\n        R = R.add(both);\r\n      }\r\n      else {\r\n        R = R.add(this);\r\n      }\r\n    }\r\n    else {\r\n      if(k.testBit(i)) {\r\n        R = R.add(x);\r\n      }\r\n    }\r\n    --i;\r\n  }\r\n\r\n  return R;\r\n}\r\n\r\nECPointFp.prototype.getX = pointFpGetX;\r\nECPointFp.prototype.getY = pointFpGetY;\r\nECPointFp.prototype.equals = pointFpEquals;\r\nECPointFp.prototype.isInfinity = pointFpIsInfinity;\r\nECPointFp.prototype.negate = pointFpNegate;\r\nECPointFp.prototype.add = pointFpAdd;\r\nECPointFp.prototype.twice = pointFpTwice;\r\nECPointFp.prototype.multiply = pointFpMultiply;\r\nECPointFp.prototype.multiplyTwo = pointFpMultiplyTwo;\r\n\r\n// ----------------\r\n// ECCurveFp\r\n\r\n// constructor\r\nfunction ECCurveFp(q,a,b) {\r\n    this.q = q;\r\n    this.a = this.fromBigInteger(a);\r\n    this.b = this.fromBigInteger(b);\r\n    this.infinity = new ECPointFp(this, null, null);\r\n}\r\n\r\nfunction curveFpGetQ() {\r\n    return this.q;\r\n}\r\n\r\nfunction curveFpGetA() {\r\n    return this.a;\r\n}\r\n\r\nfunction curveFpGetB() {\r\n    return this.b;\r\n}\r\n\r\nfunction curveFpEquals(other) {\r\n    if(other == this) return true;\r\n    return(this.q.equals(other.q) && this.a.equals(other.a) && this.b.equals(other.b));\r\n}\r\n\r\nfunction curveFpGetInfinity() {\r\n    return this.infinity;\r\n}\r\n\r\nfunction curveFpFromBigInteger(x) {\r\n    return new ECFieldElementFp(this.q, x);\r\n}\r\n\r\n// for now, work with hex strings because they're easier in JS\r\nfunction curveFpDecodePointHex(s) {\r\n    switch(parseInt(s.substr(0,2), 16)) { // first byte\r\n    case 0:\r\n\treturn this.infinity;\r\n    case 2:\r\n    case 3:\r\n\t// point compression not supported yet\r\n\treturn null;\r\n    case 4:\r\n    case 6:\r\n    case 7:\r\n\tvar len = (s.length - 2) / 2;\r\n\tvar xHex = s.substr(2, len);\r\n\tvar yHex = s.substr(len+2, len);\r\n\r\n\treturn new ECPointFp(this,\r\n\t\t\t     this.fromBigInteger(new BigInteger(xHex, 16)),\r\n\t\t\t     this.fromBigInteger(new BigInteger(yHex, 16)));\r\n\r\n    default: // unsupported\r\n\treturn null;\r\n    }\r\n}\r\n\r\nECCurveFp.prototype.getQ = curveFpGetQ;\r\nECCurveFp.prototype.getA = curveFpGetA;\r\nECCurveFp.prototype.getB = curveFpGetB;\r\nECCurveFp.prototype.equals = curveFpEquals;\r\nECCurveFp.prototype.getInfinity = curveFpGetInfinity;\r\nECCurveFp.prototype.fromBigInteger = curveFpFromBigInteger;\r\nECCurveFp.prototype.decodePointHex = curveFpDecodePointHex;\r\n"],"sourceRoot":"/source/"}