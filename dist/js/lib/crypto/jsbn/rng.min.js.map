{"version":3,"sources":["lib/crypto/jsbn/rng.js"],"names":["rng_seed_int","x","rng_pool","rng_pptr","rng_psize","rng_seed_time","Date","getTime","rng_get_byte","rng_state","prng_newstate","init","length","next","rng_get_bytes","ba","i","SecureRandom","Array","t","navigator","appName","appVersion","window","crypto","z","random","charCodeAt","Math","floor","prototype","nextBytes"],"mappings":"AAYA,QAASA,cAAaC,GACpBC,SAASC,aAAmB,IAAJF,EACxBC,SAASC,aAAgBF,GAAK,EAAK,IACnCC,SAASC,aAAgBF,GAAK,GAAM,IACpCC,SAASC,aAAgBF,GAAK,GAAM,IACjCE,UAAYC,YAAWD,UAAYC,WAIxC,QAASC,iBACPL,cAAa,GAAIM,OAAOC,WAyB1B,QAASC,gBACP,GAAgB,MAAbC,UAAmB,CAIpB,IAHAJ,gBACAI,UAAYC,gBACZD,UAAUE,KAAKT,UACXC,SAAW,EAAGA,SAAWD,SAASU,SAAUT,SAC9CD,SAASC,UAAY,CACvBA,UAAW,EAIb,MAAOM,WAAUI,OAGnB,QAASC,eAAcC,GACrB,GAAIC,EACJ,KAAIA,EAAI,EAAGA,EAAID,EAAGH,SAAUI,EAAGD,EAAGC,GAAKR,eAGzC,QAASS,iBA5DT,GAAIR,WACAP,SACAC,SACAC,SAiBJ,IAAe,MAAZF,SAAkB,CACnBA,SAAW,GAAIgB,OACff,SAAW,CACX,IAAIgB,EACJ,IAAwB,YAArBC,UAAUC,SAAyBD,UAAUE,WAAa,KAAOC,OAAOC,OAAQ,CAEjF,GAAIC,GAAIF,OAAOC,OAAOE,OAAO,GAC7B,KAAIP,EAAI,EAAGA,EAAIM,EAAEb,SAAUO,EACzBjB,SAASC,YAAgC,IAAlBsB,EAAEE,WAAWR,GAExC,KAAiBf,UAAXD,UACJgB,EAAIS,KAAKC,MAAM,MAAQD,KAAKF,UAC5BxB,SAASC,YAAcgB,IAAM,EAC7BjB,SAASC,YAAkB,IAAJgB,CAEzBhB,UAAW,EACXE,gBA0BFY,aAAaa,UAAUC,UAAYjB","file":"lib/crypto/jsbn/rng.min.js","sourcesContent":["// Random number generator - requires a PRNG backend, e.g. prng4.js\n\n// For best results, put code like\n// <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>\n// in your main HTML document.\n\nvar rng_state;\nvar rng_pool;\nvar rng_pptr;\nvar rng_psize;\n\n// Mix in a 32-bit integer into the pool\nfunction rng_seed_int(x) {\n  rng_pool[rng_pptr++] ^= x & 255;\n  rng_pool[rng_pptr++] ^= (x >> 8) & 255;\n  rng_pool[rng_pptr++] ^= (x >> 16) & 255;\n  rng_pool[rng_pptr++] ^= (x >> 24) & 255;\n  if(rng_pptr >= rng_psize) rng_pptr -= rng_psize;\n}\n\n// Mix in the current time (w/milliseconds) into the pool\nfunction rng_seed_time() {\n  rng_seed_int(new Date().getTime());\n}\n\n// Initialize the pool with junk if needed.\nif(rng_pool == null) {\n  rng_pool = new Array();\n  rng_pptr = 0;\n  var t;\n  if(navigator.appName == \"Netscape\" && navigator.appVersion < \"5\" && window.crypto) {\n    // Extract entropy (256 bits) from NS4 RNG if available\n    var z = window.crypto.random(32);\n    for(t = 0; t < z.length; ++t)\n      rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;\n  }  \n  while(rng_pptr < rng_psize) {  // extract some randomness from Math.random()\n    t = Math.floor(65536 * Math.random());\n    rng_pool[rng_pptr++] = t >>> 8;\n    rng_pool[rng_pptr++] = t & 255;\n  }\n  rng_pptr = 0;\n  rng_seed_time();\n  //rng_seed_int(window.screenX);\n  //rng_seed_int(window.screenY);\n}\n\nfunction rng_get_byte() {\n  if(rng_state == null) {\n    rng_seed_time();\n    rng_state = prng_newstate();\n    rng_state.init(rng_pool);\n    for(rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)\n      rng_pool[rng_pptr] = 0;\n    rng_pptr = 0;\n    //rng_pool = null;\n  }\n  // TODO: allow reseeding after first request\n  return rng_state.next();\n}\n\nfunction rng_get_bytes(ba) {\n  var i;\n  for(i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();\n}\n\nfunction SecureRandom() {}\n\nSecureRandom.prototype.nextBytes = rng_get_bytes;\n"],"sourceRoot":"/source/"}