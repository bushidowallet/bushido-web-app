{"version":3,"sources":["lib/crypto/extendedkey.js"],"names":["ExtendedKey","keyHash","compressed","l","Util","hexToBytes","slice","r","ecKey","ECKey","pub","getPubPoint","setCompressed","pubKeyHash","sha256ripe160","getEncoded","this","chainCode","parentFingerprint","version","depth","childIndex","getPrivateKey","serializePrivate","getWif","derive","prototype","p","v","push","concat","k","priv","toByteArrayUnsigned","length","unshift","keyBytes","hash","Crypto","SHA256","asBytes","checksum","data","Base58","encode","i","ib","ecparams","getSECCurveByName","j","jsSHA","util","bytesToHex","getHMAC","BigInteger","add","mod","getN","child","bytes"],"mappings":"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","file":"lib/crypto/extendedkey.min.js","sourcesContent":["/**\r\n * Created by Jesion on 2015-02-09.\r\n */\r\n\r\n/* jshint undef: false */\r\n\r\nvar ExtendedKey;\r\n\r\n(function() {\r\n\r\n    ExtendedKey = function(keyHash, compressed) {\r\n        if (keyHash) {\r\n            var l = Util.hexToBytes(keyHash.slice(0, 64));\r\n            var r = Util.hexToBytes(keyHash.slice(64, 128));\r\n            var ecKey = new ECKey(l);\r\n            ecKey.pub = ecKey.getPubPoint();\r\n            ecKey.setCompressed(compressed);\r\n            ecKey.pubKeyHash = Util.sha256ripe160(ecKey.pub.getEncoded(compressed));\r\n            this.ecKey = ecKey;\r\n            this.chainCode = r;\r\n            this.parentFingerprint = Util.hexToBytes(\"00000000\");\r\n            this.version = 0x0488ade4;\r\n            this.depth = 0;\r\n            this.childIndex = 0;\r\n        }\r\n        return {\r\n            'getPrivateKey': this.getPrivateKey,\r\n            'serializePrivate': this.serializePrivate,\r\n            'getWif': this.getWif,\r\n            'derive': this.derive,\r\n            'version': this.version,\r\n            'depth': this.depth,\r\n            'parentFingerprint': this.parentFingerprint,\r\n            'childIndex': this.childIndex,\r\n            'chainCode': this.chainCode,\r\n            'ecKey': this.ecKey\r\n        };\r\n    };\r\n\r\n    ExtendedKey.prototype.getPrivateKey = function() {\r\n        var p = [];\r\n        var v = this.version;\r\n        p.push(v >> 24);\r\n        p.push((v >> 16) & 0xff);\r\n        p.push((v >> 8) & 0xff);\r\n        p.push(v & 0xff);\r\n        p.push(this.depth);\r\n        p = p.concat(this.parentFingerprint);\r\n        p.push(this.childIndex >>> 24);\r\n        p.push((this.childIndex >>> 16) & 0xff);\r\n        p.push((this.childIndex >>> 8) & 0xff);\r\n        p.push(this.childIndex & 0xff);\r\n        p = p.concat(this.chainCode);\r\n        p.push(0);\r\n        var k = this.ecKey.priv.toByteArrayUnsigned();\r\n        while (k.length < 32) {\r\n            k.unshift(0);\r\n        }\r\n        p = p.concat(k);\r\n        return p;\r\n    };\r\n\r\n    ExtendedKey.prototype.serializePrivate = function (keyBytes) {\r\n        var hash = Crypto.SHA256( Crypto.SHA256( keyBytes, { asBytes: true } ), { asBytes: true } );\r\n        var checksum = hash.slice(0, 4);\r\n        var data = keyBytes.concat(checksum);\r\n        return Base58.encode(data);\r\n    };\r\n\r\n    ExtendedKey.prototype.derive = function (i) {\r\n        var ib = [];\r\n        ib.push( (i >> 24) & 0xff );\r\n        ib.push( (i >> 16) & 0xff );\r\n        ib.push( (i >>  8) & 0xff );\r\n        ib.push( i & 0xff );\r\n        var ecparams = getSECCurveByName(\"secp256k1\");\r\n        var data = this.ecKey.pub.getEncoded(this.ecKey.compressed).concat(ib);\r\n\r\n        var j = new jsSHA(Crypto.util.bytesToHex(data), 'HEX');\r\n        var hash = j.getHMAC(Crypto.util.bytesToHex(this.chainCode), \"HEX\", \"SHA-512\", \"HEX\");\r\n        var l = new BigInteger(hash.slice(0, 64), 16);\r\n        var r = Crypto.util.hexToBytes(hash.slice(64, 128));\r\n        var k = l.add(this.ecKey.priv).mod(ecparams.getN());\r\n\r\n        var child = new ExtendedKey();\r\n        child.chainCode  = r;\r\n        child.ecKey = new ECKey(k.toByteArrayUnsigned());\r\n        child.ecKey.pub = child.ecKey.getPubPoint();\r\n\r\n        child.childIndex = i;\r\n        child.parentFingerprint = this.ecKey.pubKeyHash.slice(0,4);\r\n        child.version = this.version;\r\n        child.depth = this.depth + 1;\r\n        child.ecKey.setCompressed(this.ecKey.compressed);\r\n        child.ecKey.pubKeyHash = Util.sha256ripe160(child.ecKey.pub.getEncoded(this.ecKey.compressed));\r\n\r\n        return child;\r\n    };\r\n\r\n    ExtendedKey.prototype.getWif = function() {\r\n        var bytes;\r\n        if (this.ecKey.compressed === true) {\r\n            bytes = [0+0x80].concat(this.ecKey.priv.toByteArrayUnsigned()).concat([1]);\r\n        }   else {\r\n            bytes = [0+0x80].concat(this.ecKey.priv.toByteArrayUnsigned());\r\n        }\r\n        var checksum = Crypto.SHA256(Crypto.SHA256(bytes, {asBytes: true}), {asBytes: true}).slice(0, 4);\r\n        return Base58.encode(bytes.concat(checksum));\r\n    };\r\n\r\n})();\r\n"],"sourceRoot":"/source/"}