{"version":3,"sources":["lib/crypto/util.js"],"names":["BigInteger","valueOf","nbv","prototype","toByteArrayUnsigned","ba","this","abs","toByteArray","length","slice","map","v","fromByteArrayUnsigned","concat","Util","bytesToHex","bytes","hex","i","push","toString","join","hexToBytes","c","parseInt","substr","isArray","Array","o","Object","call","sha256ripe160","data","Crypto","RIPEMD160","SHA256","asBytes"],"mappings":"AAGAA,WAAWC,QAAUC,IAQrBF,WAAWG,UAAUC,oBAAsB,WACvC,GAAIC,GAAKC,KAAKC,MAAMC,aACpB,OAAIH,GAAGI,QACW,IAAVJ,EAAG,KACHA,EAAKA,EAAGK,MAAM,IAEXL,EAAGM,IAAI,SAAUC,GACpB,MAAY,GAAJA,EAASA,EAAI,IAAMA,KAIxBP,GAUfL,WAAWa,sBAAwB,SAAUR,GACzC,MAAKA,GAAGI,OAEW,IAARJ,EAAG,GAGH,GAAIL,aAAY,GAAGc,OAAOT,IAE1B,GAAIL,YAAWK,GANfA,EAAGJ,QAAQ,GAa1B,IAAIc,OAEJ,WAEIA,MAEIC,WAAY,SAAUC,GAClB,IAAK,GAAIC,MAAUC,EAAI,EAAGA,EAAIF,EAAMR,OAAQU,IACxCD,EAAIE,MAAMH,EAAME,KAAO,GAAGE,SAAS,KACnCH,EAAIE,MAAiB,GAAXH,EAAME,IAAUE,SAAS,IAEvC,OAAOH,GAAII,KAAK,KAGpBC,WAAY,SAAUL,GAClB,IAAK,GAAID,MAAYO,EAAI,EAAGA,EAAIN,EAAIT,OAAQe,GAAK,EAC7CP,EAAMG,KAAKK,SAASP,EAAIQ,OAAOF,EAAG,GAAI,IAC1C,OAAOP,IAEXU,QAASC,MAAMD,SAAW,SAASE,GAE/B,MAA6C,mBAAtCC,OAAO3B,UAAUkB,SAASU,KAAKF,IAE1CG,cAAe,SAAUC,GACrB,MAAOC,QAAOC,UAAUD,OAAOE,OAAOH,GAAOI,SAAS,KAASA,SAAS","file":"lib/crypto/util.min.js","sourcesContent":["/* jshint undef: false */\r\n\r\n// BigInteger monkey patching\r\nBigInteger.valueOf = nbv;\r\n\r\n/**\r\n * Returns a byte array representation of the big integer.\r\n *\r\n * This returns the absolute of the contained value in big endian\r\n * form. A value of zero results in an empty array.\r\n */\r\nBigInteger.prototype.toByteArrayUnsigned = function () {\r\n    var ba = this.abs().toByteArray();\r\n    if (ba.length) {\r\n        if (ba[0] === 0) {\r\n            ba = ba.slice(1);\r\n        }\r\n        return ba.map(function (v) {\r\n            return (v < 0) ? v + 256 : v;\r\n        });\r\n    } else {\r\n        // Empty array, nothing to do\r\n        return ba;\r\n    }\r\n};\r\n\r\n/**\r\n * Turns a byte array into a big integer.\r\n *\r\n * This function will interpret a byte array as a big integer in big\r\n * endian notation and ignore leading zeros.\r\n */\r\nBigInteger.fromByteArrayUnsigned = function (ba) {\r\n    if (!ba.length) {\r\n        return ba.valueOf(0);\r\n    } else if (ba[0] & 0x80) {\r\n        // Prepend a zero so the BigInteger class doesn't mistake this\r\n        // for a negative integer.\r\n        return new BigInteger([0].concat(ba));\r\n    } else {\r\n        return new BigInteger(ba);\r\n    }\r\n};\r\n\r\n/**\r\n * Created by Jesion on 2015-02-10.\r\n */\r\nvar Util;\r\n\r\n(function() {\r\n\r\n    Util = {\r\n        // Convert a byte array to a hex string\r\n        bytesToHex: function (bytes) {\r\n            for (var hex = [], i = 0; i < bytes.length; i++) {\r\n                hex.push((bytes[i] >>> 4).toString(16));\r\n                hex.push((bytes[i] & 0xF).toString(16));\r\n            }\r\n            return hex.join(\"\");\r\n        },\r\n        // Convert a hex string to a byte array\r\n        hexToBytes: function (hex) {\r\n            for (var bytes = [], c = 0; c < hex.length; c += 2)\r\n                bytes.push(parseInt(hex.substr(c, 2), 16));\r\n            return bytes;\r\n        },\r\n        isArray: Array.isArray || function(o)\r\n        {\r\n            return Object.prototype.toString.call(o) === '[object Array]';\r\n        },\r\n        sha256ripe160: function (data) {\r\n            return Crypto.RIPEMD160(Crypto.SHA256(data, {asBytes: true}), {asBytes: true});\r\n        }\r\n    };\r\n\r\n})();"],"sourceRoot":"/source/"}