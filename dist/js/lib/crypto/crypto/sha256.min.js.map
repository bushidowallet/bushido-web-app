{"version":3,"sources":["lib/crypto/crypto/sha256.js"],"names":["C","Crypto","util","charenc","UTF8","Binary","K","SHA256","message","options","digestbytes","wordsToBytes","_sha256","asBytes","asString","bytesToString","bytesToHex","constructor","String","stringToBytes","a","b","c","d","e","f","g","h","i","j","t1","t2","m","bytesToWords","l","length","H","w","gamma0x","gamma1x","gamma0","gamma1","ch","maj","sigma0","sigma1","_blocksize"],"mappings":"CAMA,WAGA,GAAIA,GAAIC,OACJC,KAAOF,EAAEE,KACTC,QAAUH,EAAEG,QACZC,KAAOD,QAAQC,KACfC,OAASF,QAAQE,OAGjBC,GAAM,WAAY,WAAY,WAAY,WACpC,UAAY,WAAY,WAAY,WACpC,WAAY,UAAY,UAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,UAAY,UACpC,UAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,UAAY,UACpC,UAAY,UAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,UACpC,UAAY,UAAY,UAAY,UACpC,UAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,WAAY,YAG1CC,OAASP,EAAEO,OAAS,SAAUC,QAASC,SAC1C,GAAIC,aAAcR,KAAKS,aAAaJ,OAAOK,QAAQJ,SACnD,OAAOC,UAAWA,QAAQI,QAAUH,YAC7BD,SAAWA,QAAQK,SAAWT,OAAOU,cAAcL,aACnDR,KAAKc,WAAWN,aAIxBH,QAAOK,QAAU,SAAUJ,SAGtBA,QAAQS,aAAeC,SAAQV,QAAUJ,KAAKe,cAAcX,SAGhE,IAKIY,GAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,EAC3BC,GAAIC,GANJC,EAAI9B,KAAK+B,aAAazB,SACtB0B,EAAqB,EAAjB1B,QAAQ2B,OACZC,GAAM,WAAY,WAAY,WAAY,WACpC,WAAY,WAAY,UAAY,YAC1CC,IAKJL,GAAEE,GAAK,IAAM,KAAS,GAAKA,EAAI,GAC/BF,GAAIE,EAAI,IAAM,GAAM,GAAK,IAAMA,CAE/B,KAAK,GAAIN,GAAI,EAAGA,EAAII,EAAEG,OAAQP,GAAK,GAAI,CAEtCR,EAAIgB,EAAE,GACNf,EAAIe,EAAE,GACNd,EAAIc,EAAE,GACNb,EAAIa,EAAE,GACNZ,EAAIY,EAAE,GACNX,EAAIW,EAAE,GACNV,EAAIU,EAAE,GACNT,EAAIS,EAAE,EAEN,KAAK,GAAIP,GAAI,EAAO,GAAJA,EAAQA,IAAK,CAE5B,GAAQ,GAAJA,EAAQQ,EAAER,GAAKG,EAAEH,EAAID,OACpB,CAEJ,GAAIU,SAAUD,EAAER,EAAI,IAChBU,QAAUF,EAAER,EAAI,GAChBW,QAAYF,SAAW,GAAOA,UAAa,IAC/BA,SAAW,GAAOA,UAAY,IAC9BA,UAAY,EACxBG,QAAYF,SAAY,GAAOA,UAAY,KAC/BA,SAAY,GAAOA,UAAY,IAC/BA,UAAY,EAE5BF,GAAER,GAAKW,QAAUH,EAAER,EAAI,KAAO,GACvBY,QAAUJ,EAAER,EAAI,MAAQ,GAIhC,GAAIa,IAAMlB,EAAIC,GAAKD,EAAIE,EACnBiB,IAAMvB,EAAIC,EAAID,EAAIE,EAAID,EAAIC,EAC1BsB,QAAWxB,GAAK,GAAOA,IAAO,IACnBA,GAAK,GAAOA,IAAM,KAClBA,GAAK,GAAOA,IAAM,IAC7ByB,QAAWrB,GAAK,GAAOA,IAAO,IACnBA,GAAK,GAAOA,IAAM,KAClBA,GAAM,EAAMA,IAAM,GAGjCM,KAAMH,IAAM,GAAKkB,OAASH,GAAMpC,EAAEuB,IAAOQ,EAAER,KAAO,GAClDE,GAAKa,OAASD,IAEdhB,EAAID,EACJA,EAAID,EACJA,EAAID,EACJA,EAAID,EAAIO,GACRP,EAAID,EACJA,EAAID,EACJA,EAAID,EACJA,EAAIU,GAAKC,GAIVK,EAAE,IAAMhB,EACRgB,EAAE,IAAMf,EACRe,EAAE,IAAMd,EACRc,EAAE,IAAMb,EACRa,EAAE,IAAMZ,EACRY,EAAE,IAAMX,EACRW,EAAE,IAAMV,EACRU,EAAE,IAAMT,EAIT,MAAOS,IAKR7B,OAAOuC,WAAa","file":"lib/crypto/crypto/sha256.min.js","sourcesContent":["/*!\r\n * Crypto-JS v2.0.0\r\n * http://code.google.com/p/crypto-js/\r\n * Copyright (c) 2009, Jeff Mott. All rights reserved.\r\n * http://code.google.com/p/crypto-js/wiki/License\r\n */\r\n(function(){\r\n\r\n// Shortcuts\r\nvar C = Crypto,\r\n    util = C.util,\r\n    charenc = C.charenc,\r\n    UTF8 = charenc.UTF8,\r\n    Binary = charenc.Binary;\r\n\r\n// Constants\r\nvar K = [ 0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,\r\n          0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,\r\n          0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,\r\n          0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,\r\n          0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,\r\n          0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,\r\n          0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,\r\n          0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,\r\n          0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,\r\n          0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,\r\n          0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,\r\n          0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,\r\n          0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,\r\n          0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,\r\n          0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,\r\n          0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2 ];\r\n\r\n// Public API\r\nvar SHA256 = C.SHA256 = function (message, options) {\r\n\tvar digestbytes = util.wordsToBytes(SHA256._sha256(message));\r\n\treturn options && options.asBytes ? digestbytes :\r\n\t       options && options.asString ? Binary.bytesToString(digestbytes) :\r\n\t       util.bytesToHex(digestbytes);\r\n};\r\n\r\n// The core\r\nSHA256._sha256 = function (message) {\r\n\r\n\t// Convert to byte array\r\n\tif (message.constructor == String) message = UTF8.stringToBytes(message);\r\n\t/* else, assume byte array already */\r\n\r\n\tvar m = util.bytesToWords(message),\r\n\t    l = message.length * 8,\r\n\t    H = [ 0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,\r\n\t          0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19 ],\r\n\t    w = [],\r\n\t    a, b, c, d, e, f, g, h, i, j,\r\n\t    t1, t2;\r\n\r\n\t// Padding\r\n\tm[l >> 5] |= 0x80 << (24 - l % 32);\r\n\tm[((l + 64 >> 9) << 4) + 15] = l;\r\n\r\n\tfor (var i = 0; i < m.length; i += 16) {\r\n\r\n\t\ta = H[0];\r\n\t\tb = H[1];\r\n\t\tc = H[2];\r\n\t\td = H[3];\r\n\t\te = H[4];\r\n\t\tf = H[5];\r\n\t\tg = H[6];\r\n\t\th = H[7];\r\n\r\n\t\tfor (var j = 0; j < 64; j++) {\r\n\r\n\t\t\tif (j < 16) w[j] = m[j + i];\r\n\t\t\telse {\r\n\r\n\t\t\t\tvar gamma0x = w[j - 15],\r\n\t\t\t\t    gamma1x = w[j - 2],\r\n\t\t\t\t    gamma0  = ((gamma0x << 25) | (gamma0x >>>  7)) ^\r\n\t\t\t\t              ((gamma0x << 14) | (gamma0x >>> 18)) ^\r\n\t\t\t\t               (gamma0x >>> 3),\r\n\t\t\t\t    gamma1  = ((gamma1x <<  15) | (gamma1x >>> 17)) ^\r\n\t\t\t\t              ((gamma1x <<  13) | (gamma1x >>> 19)) ^\r\n\t\t\t\t               (gamma1x >>> 10);\r\n\r\n\t\t\t\tw[j] = gamma0 + (w[j - 7] >>> 0) +\r\n\t\t\t\t       gamma1 + (w[j - 16] >>> 0);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar ch  = e & f ^ ~e & g,\r\n\t\t\t    maj = a & b ^ a & c ^ b & c,\r\n\t\t\t    sigma0 = ((a << 30) | (a >>>  2)) ^\r\n\t\t\t             ((a << 19) | (a >>> 13)) ^\r\n\t\t\t             ((a << 10) | (a >>> 22)),\r\n\t\t\t    sigma1 = ((e << 26) | (e >>>  6)) ^\r\n\t\t\t             ((e << 21) | (e >>> 11)) ^\r\n\t\t\t             ((e <<  7) | (e >>> 25));\r\n\r\n\r\n\t\t\tt1 = (h >>> 0) + sigma1 + ch + (K[j]) + (w[j] >>> 0);\r\n\t\t\tt2 = sigma0 + maj;\r\n\r\n\t\t\th = g;\r\n\t\t\tg = f;\r\n\t\t\tf = e;\r\n\t\t\te = d + t1;\r\n\t\t\td = c;\r\n\t\t\tc = b;\r\n\t\t\tb = a;\r\n\t\t\ta = t1 + t2;\r\n\r\n\t\t}\r\n\r\n\t\tH[0] += a;\r\n\t\tH[1] += b;\r\n\t\tH[2] += c;\r\n\t\tH[3] += d;\r\n\t\tH[4] += e;\r\n\t\tH[5] += f;\r\n\t\tH[6] += g;\r\n\t\tH[7] += h;\r\n\r\n\t}\r\n\r\n\treturn H;\r\n\r\n};\r\n\r\n// Package private blocksize\r\nSHA256._blocksize = 16;\r\n\r\n})();\r\n"],"sourceRoot":"/source/"}