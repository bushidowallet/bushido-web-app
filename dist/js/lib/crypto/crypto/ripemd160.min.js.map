{"version":3,"sources":["lib/crypto/crypto/ripemd160.js"],"names":["rmd160_f","j","x","y","z","rmd160_K1","rmd160_K2","safe_add","lsw","msw","bit_rol","num","cnt","C","Crypto","util","charenc","UTF8","Binary","bytesToLWords","bytes","output","Array","length","i","lWordsToBytes","words","push","RIPEMD160","message","options","digestbytes","_rmd160","asBytes","asString","bytesToString","bytesToHex","constructor","String","stringToBytes","len","h0","h1","h2","h3","h4","T","A1","B1","C1","D1","E1","A2","B2","C2","D2","E2","rmd160_r1","rmd160_s1","rmd160_r2","rmd160_s2"],"mappings":"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","file":"lib/crypto/crypto/ripemd160.min.js","sourcesContent":["/*!\n * Crypto-JS v2.0.0\n * http://code.google.com/p/crypto-js/\n * Copyright (c) 2009, Jeff Mott. All rights reserved.\n * http://code.google.com/p/crypto-js/wiki/License\n *\n * A JavaScript implementation of the RIPEMD-160 Algorithm\n * Version 2.2 Copyright Jeremy Lin, Paul Johnston 2000 - 2009.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n * Also http://www.ocf.berkeley.edu/~jjlin/jsotp/\n * Ported to Crypto-JS by Stefan Thomas.\n */\n\n(function () {\n\t// Shortcuts\n\tvar C = Crypto,\n    util = C.util,\n    charenc = C.charenc,\n    UTF8 = charenc.UTF8,\n    Binary = charenc.Binary;\n\n\t// Convert a byte array to little-endian 32-bit words\n\tutil.bytesToLWords = function (bytes) {\n\n\t\tvar output = Array(bytes.length >> 2);\n\t\tfor (var i = 0; i < output.length; i++)\n\t\t\toutput[i] = 0;\n\t\tfor (var i = 0; i < bytes.length * 8; i += 8)\n\t\t\toutput[i>>5] |= (bytes[i / 8] & 0xFF) << (i%32);\n\t\treturn output;\n\t};\n\n\t// Convert little-endian 32-bit words to a byte array\n\tutil.lWordsToBytes = function (words) {\n\t\tvar output = [];\n\t\tfor (var i = 0; i < words.length * 32; i += 8)\n\t\t\toutput.push((words[i>>5] >>> (i % 32)) & 0xff);\n\t\treturn output;\n\t};\n\n\t// Public API\n\tvar RIPEMD160 = C.RIPEMD160 = function (message, options) {\n\t\tvar digestbytes = util.lWordsToBytes(RIPEMD160._rmd160(message));\n\t\treturn options && options.asBytes ? digestbytes :\n\t\t\toptions && options.asString ? Binary.bytesToString(digestbytes) :\n\t\t\tutil.bytesToHex(digestbytes);\n\t};\n\n\t// The core\n\tRIPEMD160._rmd160 = function (message)\n\t{\n\t\t// Convert to byte array\n\t\tif (message.constructor == String) message = UTF8.stringToBytes(message);\n\n\t\tvar x = util.bytesToLWords(message),\n\t\t    len = message.length * 8;\n\n\t\t/* append padding */\n\t\tx[len >> 5] |= 0x80 << (len % 32);\n\t\tx[(((len + 64) >>> 9) << 4) + 14] = len;\n\n\t\tvar h0 = 0x67452301;\n\t\tvar h1 = 0xefcdab89;\n\t\tvar h2 = 0x98badcfe;\n\t\tvar h3 = 0x10325476;\n\t\tvar h4 = 0xc3d2e1f0;\n\n\t\tfor (var i = 0; i < x.length; i += 16) {\n\t\t\tvar T;\n\t\t\tvar A1 = h0, B1 = h1, C1 = h2, D1 = h3, E1 = h4;\n\t\t\tvar A2 = h0, B2 = h1, C2 = h2, D2 = h3, E2 = h4;\n\t\t\tfor (var j = 0; j <= 79; ++j) {\n\t\t\t\tT = safe_add(A1, rmd160_f(j, B1, C1, D1));\n\t\t\t\tT = safe_add(T, x[i + rmd160_r1[j]]);\n\t\t\t\tT = safe_add(T, rmd160_K1(j));\n\t\t\t\tT = safe_add(bit_rol(T, rmd160_s1[j]), E1);\n\t\t\t\tA1 = E1; E1 = D1; D1 = bit_rol(C1, 10); C1 = B1; B1 = T;\n\t\t\t\tT = safe_add(A2, rmd160_f(79-j, B2, C2, D2));\n\t\t\t\tT = safe_add(T, x[i + rmd160_r2[j]]);\n\t\t\t\tT = safe_add(T, rmd160_K2(j));\n\t\t\t\tT = safe_add(bit_rol(T, rmd160_s2[j]), E2);\n\t\t\t\tA2 = E2; E2 = D2; D2 = bit_rol(C2, 10); C2 = B2; B2 = T;\n\t\t\t}\n\t\t\tT = safe_add(h1, safe_add(C1, D2));\n\t\t\th1 = safe_add(h2, safe_add(D1, E2));\n\t\t\th2 = safe_add(h3, safe_add(E1, A2));\n\t\t\th3 = safe_add(h4, safe_add(A1, B2));\n\t\t\th4 = safe_add(h0, safe_add(B1, C2));\n\t\t\th0 = T;\n\t\t}\n\t\treturn [h0, h1, h2, h3, h4];\n\t}\n\n\tfunction rmd160_f(j, x, y, z)\n\t{\n\t\treturn ( 0 <= j && j <= 15) ? (x ^ y ^ z) :\n\t\t\t(16 <= j && j <= 31) ? (x & y) | (~x & z) :\n\t\t\t(32 <= j && j <= 47) ? (x | ~y) ^ z :\n\t\t\t(48 <= j && j <= 63) ? (x & z) | (y & ~z) :\n\t\t\t(64 <= j && j <= 79) ? x ^ (y | ~z) :\n\t\t\t\"rmd160_f: j out of range\";\n\t}\n\tfunction rmd160_K1(j)\n\t{\n\t\treturn ( 0 <= j && j <= 15) ? 0x00000000 :\n\t\t\t(16 <= j && j <= 31) ? 0x5a827999 :\n\t\t\t(32 <= j && j <= 47) ? 0x6ed9eba1 :\n\t\t\t(48 <= j && j <= 63) ? 0x8f1bbcdc :\n\t\t\t(64 <= j && j <= 79) ? 0xa953fd4e :\n\t\t\t\"rmd160_K1: j out of range\";\n\t}\n\tfunction rmd160_K2(j)\n\t{\n\t\treturn ( 0 <= j && j <= 15) ? 0x50a28be6 :\n\t\t\t(16 <= j && j <= 31) ? 0x5c4dd124 :\n\t\t\t(32 <= j && j <= 47) ? 0x6d703ef3 :\n\t\t\t(48 <= j && j <= 63) ? 0x7a6d76e9 :\n\t\t\t(64 <= j && j <= 79) ? 0x00000000 :\n\t\t\t\"rmd160_K2: j out of range\";\n\t}\n\tvar rmd160_r1 = [\n\t\t0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n\t\t7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,\n\t\t3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,\n\t\t1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,\n\t\t4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13\n\t];\n\tvar rmd160_r2 = [\n\t\t5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,\n\t\t6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,\n\t\t15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,\n\t\t8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,\n\t\t12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11\n\t];\n\tvar rmd160_s1 = [\n\t\t11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,\n\t\t7,  6,  8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,\n\t\t11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,\n\t\t11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,\n\t\t9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6\n\t];\n\tvar rmd160_s2 = [\n\t\t8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,\n\t\t9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,\n\t\t9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,\n\t\t15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,\n\t\t8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11\n\t];\n\n\t/*\n\t * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n\t * to work around bugs in some JS interpreters.\n\t */\n\tfunction safe_add(x, y)\n\t{\n\t\tvar lsw = (x & 0xFFFF) + (y & 0xFFFF);\n\t\tvar msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n\t\treturn (msw << 16) | (lsw & 0xFFFF);\n\t}\n\n\t/*\n\t * Bitwise rotate a 32-bit number to the left.\n\t */\n\tfunction bit_rol(num, cnt)\n\t{\n\t\treturn (num << cnt) | (num >>> (32 - cnt));\n\t}\n})();\n"],"sourceRoot":"/source/"}