{"version":3,"sources":["lib/crypto/crypto/crypto.js"],"names":["base64map","Crypto","window","util","rotl","n","b","rotr","endian","constructor","Number","i","length","randomBytes","bytes","push","Math","floor","random","bytesToWords","words","wordsToBytes","bytesToHex","hex","toString","join","hexToBytes","c","parseInt","substr","bytesToBase64","btoa","Binary","bytesToString","base64","triplet","j","charAt","base64ToBytes","atob","stringToBytes","replace","imod4","indexOf","pow","mode","charenc","UTF8","str","unescape","encodeURIComponent","decodeURIComponent","escape","charCodeAt","String","fromCharCode"],"mappings":"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","file":"lib/crypto/crypto/crypto.min.js","sourcesContent":["/*!\r\n * Crypto-JS v2.0.0\r\n * http://code.google.com/p/crypto-js/\r\n * Copyright (c) 2009, Jeff Mott. All rights reserved.\r\n * http://code.google.com/p/crypto-js/wiki/License\r\n */\r\n(function(){\r\n\r\nvar base64map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n// Global Crypto object\r\nvar Crypto = window.Crypto = {};\r\n\r\n// Crypto utilities\r\nvar util = Crypto.util = {\r\n\r\n\t// Bit-wise rotate left\r\n\trotl: function (n, b) {\r\n\t\treturn (n << b) | (n >>> (32 - b));\r\n\t},\r\n\r\n\t// Bit-wise rotate right\r\n\trotr: function (n, b) {\r\n\t\treturn (n << (32 - b)) | (n >>> b);\r\n\t},\r\n\r\n\t// Swap big-endian to little-endian and vice versa\r\n\tendian: function (n) {\r\n\r\n\t\t// If number given, swap endian\r\n\t\tif (n.constructor == Number) {\r\n\t\t\treturn util.rotl(n,  8) & 0x00FF00FF |\r\n\t\t\t       util.rotl(n, 24) & 0xFF00FF00;\r\n\t\t}\r\n\r\n\t\t// Else, assume array and swap all items\r\n\t\tfor (var i = 0; i < n.length; i++)\r\n\t\t\tn[i] = util.endian(n[i]);\r\n\t\treturn n;\r\n\r\n\t},\r\n\r\n\t// Generate an array of any length of random bytes\r\n\trandomBytes: function (n) {\r\n\t\tfor (var bytes = []; n > 0; n--)\r\n\t\t\tbytes.push(Math.floor(Math.random() * 256));\r\n\t\treturn bytes;\r\n\t},\r\n\r\n\t// Convert a byte array to big-endian 32-bit words\r\n\tbytesToWords: function (bytes) {\r\n\t\tfor (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)\r\n\t\t\twords[b >>> 5] |= bytes[i] << (24 - b % 32);\r\n\t\treturn words;\r\n\t},\r\n\r\n\t// Convert big-endian 32-bit words to a byte array\r\n\twordsToBytes: function (words) {\r\n\t\tfor (var bytes = [], b = 0; b < words.length * 32; b += 8)\r\n\t\t\tbytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);\r\n\t\treturn bytes;\r\n\t},\r\n\r\n\t// Convert a byte array to a hex string\r\n\tbytesToHex: function (bytes) {\r\n\t\tfor (var hex = [], i = 0; i < bytes.length; i++) {\r\n\t\t\thex.push((bytes[i] >>> 4).toString(16));\r\n\t\t\thex.push((bytes[i] & 0xF).toString(16));\r\n\t\t}\r\n\t\treturn hex.join(\"\");\r\n\t},\r\n\r\n\t// Convert a hex string to a byte array\r\n\thexToBytes: function (hex) {\r\n\t\tfor (var bytes = [], c = 0; c < hex.length; c += 2)\r\n\t\t\tbytes.push(parseInt(hex.substr(c, 2), 16));\r\n\t\treturn bytes;\r\n\t},\r\n\r\n\t// Convert a byte array to a base-64 string\r\n\tbytesToBase64: function (bytes) {\r\n\r\n\t\t// Use browser-native function if it exists\r\n\t\tif (typeof btoa == \"function\") return btoa(Binary.bytesToString(bytes));\r\n\r\n\t\tfor(var base64 = [], i = 0; i < bytes.length; i += 3) {\r\n\t\t\tvar triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\r\n\t\t\tfor (var j = 0; j < 4; j++) {\r\n\t\t\t\tif (i * 8 + j * 6 <= bytes.length * 8)\r\n\t\t\t\t\tbase64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));\r\n\t\t\t\telse base64.push(\"=\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn base64.join(\"\");\r\n\r\n\t},\r\n\r\n\t// Convert a base-64 string to a byte array\r\n\tbase64ToBytes: function (base64) {\r\n\r\n\t\t// Use browser-native function if it exists\r\n\t\tif (typeof atob == \"function\") return Binary.stringToBytes(atob(base64));\r\n\r\n\t\t// Remove non-base-64 characters\r\n\t\tbase64 = base64.replace(/[^A-Z0-9+\\/]/ig, \"\");\r\n\r\n\t\tfor (var bytes = [], i = 0, imod4 = 0; i < base64.length; imod4 = ++i % 4) {\r\n\t\t\tif (imod4 === 0) continue;\r\n\t\t\tbytes.push(((base64map.indexOf(base64.charAt(i - 1)) & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2)) |\r\n\t\t\t           (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));\r\n\t\t}\r\n\r\n\t\treturn bytes;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// Crypto mode namespace\r\nCrypto.mode = {};\r\n\r\n// Crypto character encodings\r\nvar charenc = Crypto.charenc = {};\r\n\r\n// UTF-8 encoding\r\nvar UTF8 = charenc.UTF8 = {\r\n\r\n\t// Convert a string to a byte array\r\n\tstringToBytes: function (str) {\r\n\t\treturn Binary.stringToBytes(unescape(encodeURIComponent(str)));\r\n\t},\r\n\r\n\t// Convert a byte array to a string\r\n\tbytesToString: function (bytes) {\r\n\t\treturn decodeURIComponent(escape(Binary.bytesToString(bytes)));\r\n\t}\r\n\r\n};\r\n\r\n// Binary encoding\r\nvar Binary = charenc.Binary = {\r\n\r\n\t// Convert a string to a byte array\r\n\tstringToBytes: function (str) {\r\n\t\tfor (var bytes = [], i = 0; i < str.length; i++)\r\n\t\t\tbytes.push(str.charCodeAt(i));\r\n\t\treturn bytes;\r\n\t},\r\n\r\n\t// Convert a byte array to a string\r\n\tbytesToString: function (bytes) {\r\n\t\tfor (var str = [], i = 0; i < bytes.length; i++)\r\n\t\t\tstr.push(String.fromCharCode(bytes[i]));\r\n\t\treturn str.join(\"\");\r\n\t}\r\n\r\n};\r\n\r\n})();\r\n"],"sourceRoot":"/source/"}